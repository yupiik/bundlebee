[{"lang":"en","lvl2":"Configuration","text":"Apply/deploy a set of descriptors from a root one.\nName: apply.\nAlveolus name to deploy. When set to auto, it will deploy all manifests found in the classpath. If you set manifest option, alveolus is set to auto and there is a single alveolus in it, this will default to it instead of using classpath deployment. Default value: auto\nRoot dependency to download to get the manifest. If set to auto it is assumed to be present in current classpath. Default value: auto\nIf true, bundlebee.* labels will be injected into the descritors. This is required for rollback command to work. Default value: true\nIf true, a bundlebee.timestamp label will be injected into the descritors with current date before applying the descriptor. Default value: true\nManifest to load to start to deploy. This optional setting mainly enables to use dependencies easily. Ignored if set to skip. Default value: skip","title":"Apply","url":"//yupiik.github.io/bundlebee/commands/apply.configuration.html"},{"lang":"en","text":"elasticsearch-local io.yupiik.alveoli:elasticsearch-local:1.0.0-SNAPSHOT: setup \"elasticsearch-local\" which runs an Elasticsearch instance usable by other applications.\npostgres-local io.yupiik.alveoli:postgres-local:1.0.0-SNAPSHOT: setup \"postgres-local\" which runs a PostgreSQL instance usable by other applications.\nprometheus-simple io.yupiik.alveoli:prometheus-simple:1.0.0-SNAPSHOT: prometheus local/dev setup. Will be available on http://$(PROMETHEUS_SERVICE_SERVICE_HOST):$(PROMETHEUS_SERVICE_SERVICE_PORT).\nzipkin-simple io.yupiik.alveoli:zipkin-simple:1.0.0-SNAPSHOT: zipkin in memory setup. Will be available on http://$(ZIPKIN_SERVICE_SERVICE_HOST):$(ZIPKIN_SERVICE_SERVICE_PORT). For example http://$(ZIPKIN_SERVICE_SERVICE_HOST):$(ZIPKIN_SERVICE_SERVICE_PORT)/api/v2/spans to push spans through HTTP.","title":"Available Alveoli","url":"//yupiik.github.io/bundlebee/alveoli.html"},{"lang":"en","text":"apply\nbuild\ncipher-password\ncreate-master-password\ndelete\ndeploy\nhelp\nhttp\nnew\nrollback\nversion\nversions","title":"Available commands","url":"//yupiik.github.io/bundlebee/commands.html"},{"lang":"en","text":"apply\nhelp","title":"Available commands","url":"//yupiik.github.io/bundlebee/commands/index.html"},{"lang":"en","lvl2":"Configuration","text":"Build a project.\nName: build.\nBundle artifactId.\nProject to build. Default value: target\nIf true it will be added to your local maven repository. Default value: true\nProject to build. Default value: .\nBundle groupId.\nBundle version.","title":"Build","url":"//yupiik.github.io/bundlebee/commands/build.configuration.html"},{"lang":"en","lvl2":"Configuration","text":"Cipher a password to put it in ~/.m2/settings.xml servers (useful for deploy command for example).\nName: cipher-password.\nPassword value to cipher (auto generates a random one). Default value: auto","title":"Cipher-password","url":"//yupiik.github.io/bundlebee/commands/cipher-password.configuration.html"},{"lang":"en","lvl2":"Configuration","text":"Generate a master password if none exist (in ~/.m2/settings-security.xml)\nName: create-master-password.\nMaster password value, if auto it will be generated. Default value: auto","title":"Create-master-password","url":"//yupiik.github.io/bundlebee/commands/create-master-password.configuration.html"},{"lang":"en","lvl2":"Configuration","text":"Delete an alveolus deployment by deleting all related descriptors. bundlebee.delete.propagationPolicy can be set in descriptor(s) metadata to force default CLI behavior for this descriptor.\nName: delete.\nAlveolus name to rollback (in currently deployed version). When set to auto, it will look up all manifests found in the classpath (it is not recommended until you perfectly know what you do). If you set manifest option, alveolus is set to auto and there is a single alveolus in it, this will default to it instead of using classpath deployment. Default value: auto\nRoot dependency to download to get the manifest. If set to auto it is assumed to be present in current classpath. Default value: auto\nManifest to load to start to find the alveolus. This optional setting mainly enables to use dependencies easily. Ignored if set to skip. Default value: skip","title":"Delete","url":"//yupiik.github.io/bundlebee/commands/delete.configuration.html"},{"lang":"en","lvl2":"Configuration","text":"Build and deploy a project. It inherits from most configuration of build command and adds remote repository settings.\nName: deploy.\nBundle artifactId.\nProject to build. Default value: target\nIf true it will be added to your local maven repository too. Default value: true\nProject to build. Default value: .\nIf true it enables to upload an artifact even if already present. When auto it enables it for snapshots but not for releases. Default value: auto\nBundle groupId.\nIf not skip it will deploy the artifact on a remote repository (nexus v2 or v3). Syntax must be a URL pointing to the REST API (base URL). If you don’t set the userinfo (username:password) in the URL it will be looked up in your settings.xml - potentially ciphered - using the hostname as serverId until you force it with --serverId. Default value: skip\nNexus repository. It is the repository name the artifact(s) will be uploaded to. If auto, it will be maven-releases if the version is a release one and maven-snapshots otherwise. Default value: auto\nServerId to lookup from your maven settings.xml for remote deployment if enabled (nexus authentication).\nBundle version.","title":"Deploy","url":"//yupiik.github.io/bundlebee/commands/deploy.configuration.html"},{"lang":"en","lvl2":"Installation\nCreate your first alveolus","lvl3":"Java Mode\nBinary\nPre-requisite\nStart with a maven project\nStart from scratch (without Java and Maven)","text":"Ensure to use java >= 11.0.7 (previous Java 11 versions can work but have an issue with TLS HTTP client you can hit).\nDownload the bundlebee-core fat har:\nYou can now run it with the command: ``.\nas of today, no release of BundleBee are on central yet so this script does not yet work.\nthis only works for linux amd64 computers.\nBundleBee assumes it is installed itself indeed but depending how you package your alveolus it can require Java (>= 8) and Maven. If they are not installed on your system, we encourage you to use sdkman to do so.\nthis can be replaced by any zip packager and is not a strong requirement.\nThere are a ton of ways to create a maven projects but here is the simplest one:\nThen you can go in my-app-alveolus/. You can run mvn package to ensure your java/maven setup is correct.\nAt that stage we can start working on our alveolus but if you want to be \"purist\" you can clean up the default skaffolded project: rm -Rf src/test/ src/main/java/.\nTo start working on our alveolus, we will create src/main/resources/bundlebee folder: mkdir -p src/main/resources/bundlebee.\nAt that stage your project should look like:\nTo describe an application, you have to create a manifest.json file in this bundlebee folder:\nAnd add the referenced Kubernetes descriptor in kubernetes subfolder:\nNow you can install your alveolus: mvn install.\nThis will create a target/my-app-alveolus-1.0-SNAPSHOT.jar file which is the entry point to deploy your application.\nNow you can deploy this executing bundlebee apply --from com.company:my-app-alveolus:1.0-SNAPSHOT --descriptor hello.\nAnd that’s it, now hello world application should be up and running in your Kubernetes cluster.\nit is more than encouraged to name the kubernetes descriptor based on the project unique identifier. For example <groupId>.<artifactId>.<alveolus_name>.yaml. It will avoid conflicts when multiple alveolus are in the same classpath using native java mode and not file driven mode.\nIn this part we will reuse the descriptors of Start with maven section so we will just show how to bundle without Java/Maven the alveolus.\nThe overall goal is to create a zip containing the manifest.json and the Kubernetes descriptor. Here is a small script helping to do that:\nThe name of the project (will create a root directory with this name)\nCreate the alveolus structure\nNow you can copy the descriptors as in Start with maven section in my-app-alveolus/bundlebee/ folder.\nOnce done we just have to bundle it as a zip. One option on UNIx system is to use this command:\nReuse the same setup than in previous script\nCreate a zip containing the alveolus structure using zip command\nAnd that’s it.\nthis trick to create a zip can be adapted to any language (javascript, typescript, go, python, ruby, …) and enables to bundle an alveolus in any build tool very easily.","title":"Getting Started","url":"//yupiik.github.io/bundlebee/getting-started.html"},{"lang":"en","lvl2":"Configuration","text":"Print help.\nName: help.\nNo configuration.","title":"Help","url":"//yupiik.github.io/bundlebee/commands/help.configuration.html"},{"lang":"en","lvl2":"Overall architecture\nManifest\nDeployment and Dependency Management\nCustomize descriptors","lvl3":"Manifest Descriptor\nJSON-Schema","text":"One of the BundleBee goals is to inherit from the well known and supported Apache Maven infrastructure. In other words, the goal is to be able to reuse Maven registries (central, custom nexus, artifactory, …) to store application descriptors. It also leverage the well know java packaging (jar or zip) to ensure a strong storage reliability in these systems.\nOne direct benefit is that it becomes very easy to have an immutable system once deployed and therefore a better tracability of what is deployed.\nOverall, BundleBee will manipulate what we call alveolus which are basically just a set of descriptors. An alveolus is a zip or a jar which is structured this way:\nA bundlebee folder contains all the descriptors\nA manifest.json contains the list of application or library this alveolus provides\nA kubenetes folder contains the list of descriptors used by alveoli\nManifest is the central point of the system. It provides the unique identifier of your recipe (application/library) and what to do to set it up.\nHere is its configuration specification:\nBundleBee manifest descriptor.\nName\nJSON Name\nType\nDescription\nManifest.alveoli\nalveoli\narray of object\nList of described applications/libraries.\nname\nstring\nName of the alveolus (recipe). It must be unique accross the whole classpath. Using maven style identifier, it is recommended to name it <groupId>:<artifactId>:<version> using maven filtering but it is not enforced.\nversion\nIf name does not follow <groupId>:<artifactId>:<version> naming (i.e. version can’t be extracted from the name) then you can specify the version there. Note that if set, this is used in priority (explicit versus deduced).\nAlveolus.dependencies\ndependencies\nDependencies of this alveolus. It is a way to import transitively a set of descriptors.\nAlveolus.descriptors\ndescriptors\nList of descriptors to install for this alveolus. This is required even if an empty array.\nAlveolus.patches\npatches\nPatches on descriptors. It enables to inject configuration in descriptors by patching (using JSON-Patch or plain interpolation with ${key} values) their JSON representation. The key is the descriptor name and each time the descriptor is found it will be applied.\nlocation\nWhere to find the alveolus. Note it will ensure the jar is present on the local maven repository.\nAlveolus name.\ninterpolate\nbool\nIf set to true, it will interpolate the descriptor just before applying it - i.e. after it had been patched if needed. You can use --<config-key> <value> to inject bindings set as {{config-key:-default value}}.\nOptional, if coming form another manifest, the dependency to download to get the alveolus.\nName of the descriptor to install. For kubernetes descriptors you can omit the .yaml extension.\ntype\nType of this descriptor. For now only kubernetes is supported. It also defines in which folder under bundlebee the descriptor(s) are looked for from its name.\ndescriptorName\nThe descriptor to patch. It can be any descriptor, including transitive ones.\nIf set to true, it will interpolate the patch from the execution configuration which means you can use --<config-key> <value> to inject bindings too.\nnull\npatch\nJSON-Patch to apply on the JSON representation of the descriptor. It enables to inject configuration in descriptors for example, or changing some name/application.\nIf you use JSON-Schema facilities in your preferred editor, here is the raw JSON-Schema for the manifest descriptor:\nA manifest can reference descriptors in other alveoli, it just requires to reference them to let bundlebee find them.\nThere are mainly two ways to deploy an alveolus:\nClasspath mode: you put all your zip/jar in the classpath. This mode requires there is no conflict between descriptor names (which is the recommended practise) and it will never look for external descriptors. It is typically a recommended mode to avoid network I/O except with the Kubernetes cluster.\nFetch mode: in this mode, a missing descriptor in the classpath will look for descriptor.location and lookup the jar/zip referenced by this location (generally a maven coordinate in the form groupId:artifactId:version). It will first use your local Maven repository but can download the jar/zip if missing locally. Then the jar/zip is read and descriptors are looked up from there. This mode is nicer when depending on a lot of external alveoli but requires I/O to grab the dependencies.\nIndeed, you can bundle all your stack and hardcode your configuration or create one alveolus per environment. This is one option which works well and enable to version its configuration.\nHowever, for testing purposes, it is also neat to be able to patch descriptors on the fly. For that you can use descriptor.patches in the manifest which will transitively enable to patch the descriptors - even the ones you don’t own - using JSON-Patch and interpolations.\nHere are some examples.\nWe add to the alveolus a list of patches to apply on some descriptors\nWe reference the descriptor to patch\nWe enable interpolation from Microprofile Config (which include CLI args)\nWe define the JSON-Patch to use (optional, interpolation will also interpolate the descriptor if designed to be interpolated)\nWe use an interpolation in the configuration in the JSON-Patch replace operation which replaces the data of the referenced ConfigMap\nthis mecanism is very useful for ConfigMap descriptors but also PersistenceVolume since you can now patch `/spec/hostPath `easily too.","title":"How it works","url":"//yupiik.github.io/bundlebee/how-it-works.html"},{"lang":"en","lvl2":"Configuration","text":"Execute a HTTP request over Kubernetes client. This is mainly for not yet existing commands and to reuse all the client auto-configuration.\nName: http.\nIf true, an exception if thrown if the status is not between 200 and 299 (making the execution a failure). Default value: true\nRequest HTTP headers (in properties format). Default value:\nHTTP verb to use for the request. Default value: GET\nHTTP request path (optionally with query parameters). You can use the absolute kubernetes URL but if the value does not start with a protocol (http or https) then it will be prefixed by the Kubernetes API base. Default value: /api/\nHTTP payload to use for the request - skipped for method different from PATCH, POST and PUT. Default value: ``\nIf true, only the payload of the response will be logged if successful. Default value: true","title":"Http","url":"//yupiik.github.io/bundlebee/commands/http.configuration.html"},{"lang":"en","text":"","title":"Index","url":"//yupiik.github.io/bundlebee/index.html"},{"lang":"en","lvl2":"Configuration","text":"Creates a new project.\nName: new.\nBundle artifactId.\nWhere to create the project. If not set it will use the artifact value in current folder.\nBundle groupId.\nBy default a sample alveolus with a config map is generated, if false it will be skipped. Default value: false\nBundle version. Default value: 1.0.0","title":"New","url":"//yupiik.github.io/bundlebee/commands/new.configuration.html"},{"lang":"en","lvl2":"Configuration","text":"Rollback an alveolus deployment.\nThe strategy is the following one:\nLoad current alveolus (recursively) to list all descriptors in \"current\" version\nFind previous version if not explicit (by choosing the first previous on in the list of available version on maven repository)\nRun delete command for current version\nRun apply command for previous version\nthis command only uses releases when it guesses the versions, it does not handles SNAPSHOTs. If you want to rollback to a snapshot, ensure to configure previous* properties.\nthis is equivalent to apply and delete commands successfully. For now it is recommended to do both manually.\nName: rollback.\nAlveolus name to rollback (in currently deployed version). When set to auto, it will look up all manifests found in the classpath (it is not recommended until you perfectly know what you do). If you set manifest option, alveolus is set to auto and there is a single alveolus in it, this will default to it instead of using classpath deployment. Default value: auto\nRoot dependency to download to get the manifest. If set to auto it is assumed to be present in current classpath. Default value: auto\nManifest to load to start to find the alveolus. This optional setting mainly enables to use dependencies easily. Ignored if set to skip. Default value: skip\nAlveolus name to install as rollback. Default value: auto\nSame as from but for the previous alveolus to install. Default value: auto\nSame as manifest but for the previous alveolus to install. Default value: skip\nIf true, and previous alveolus is not defined on the CLI, we will query the release repository to find available versions. If the alveolus name does not match <groupId>:<artifactId>:<version>[:<type>:<classifier>] pattern then a heuristic is used instead. Default value: true","title":"Rollback","url":"//yupiik.github.io/bundlebee/commands/rollback.configuration.html"},{"lang":"en","lvl2":"Custom configuration","text":"BundleBee supports a user configuration. It means you change some defaults for your local setup creating a file ~/.bundlebeerc.\nThe syntax is a standard properties one.\nHere are the supported configurations:\nWhen kubeconfig is not set the base API endpoint. Default value: http://localhost:8080\nDefault value for deletions of propagationPolicy. Values can be Orphan, Foreground and Background. Default value: Foreground\nIf true http requests/responses are skipped. Note that dry run implies verbose=true for the http client. Note that as of today, all responses are mocked by a HTTP 200 and an empty JSON payload. Default value: false\nWhen kubeconfig is not set the namespace to use. Default value: default\nShould SSL connector be validated or not. Default value: true\nIf true http requests/responses to Kubernetes will be logged. Default value: false\nWhere to cache maven dependencies. If set to auto, $HOME/.m2/repository is used. Default value: auto\nIf true we only use cache value and never fallback on default maven settings.xml location. Default value: false\nWhen fetching a dependency using HTTP, the connection timeout for this dependency. Default value: 30000\nIf false we first try to read settings.xml file(s) in cache location before the default one. Default value: true\nEnables to disable the download, i.e. ensure it runs only with local maven repository. Default value: false\nDefault release repository. Default value: https://repo.maven.apache.org/maven2/\nDefault snapshot repository, not set by default. Default value: unset\nKubeconfig location. If set to auto it will try to guess from your $HOME/.kube/config file until you set it so explicit where it will use other bundlebee.kube properties to create the client. Default value: auto\nthis also applies for command configuration so you can also force some defaults for your most used commands this way.\nYou can also set a custom configuration file using --config-file. This enables to run a command with a custom set of configuration:","title":"User Configuration","url":"//yupiik.github.io/bundlebee/user-configuration.html"},{"lang":"en","lvl2":"Configuration","text":"Shows the application version.\nName: version.\nNo configuration.","title":"Version","url":"//yupiik.github.io/bundlebee/commands/version.configuration.html"},{"lang":"en","lvl2":"Configuration","text":"List versions for an artifact to know which ones are available.\nName: versions.\nBundle artifactId.\nBundle groupId.","title":"Versions","url":"//yupiik.github.io/bundlebee/commands/versions.configuration.html"},{"lang":"en","lvl2":"Maven Dependency\nSample Usage\nConfiguration","text":"Setup \"elasticsearch-local\" which runs an Elasticsearch instance usable by other applications.\nThe Elasticsearch cluster name. Default value: elasticsearch-local.\nThe discovery to use, default is for a single node so if you patch the descriptors to make it a cluster, ensure to tune it. Default value: single-node.\nThe elasticsearch image to use. Default value: elasticsearch:7.10.1.\nThe ES_JAVA_OPTS value. Default value: -Dbundlebee=true.\nWhere to store Elasticsearch data on the host. Default value: /data/elasticsearch-local.","title":"io.yupiik.alveoli:elasticsearch-local:1.0.0-SNAPSHOT","url":"//yupiik.github.io/bundlebee/alveoli/elasticsearch-local-io-yupiik-alveoli-elasticsearch-local-1-0-0-SNAPSHOT.html"},{"lang":"en","lvl2":"Maven Dependency\nSample Usage\nConfiguration","text":"Setup \"postgres-local\" which runs a PostgreSQL instance usable by other applications.\nThe default database name in the PostgreSQL instance. Default value: postgres.\nWhere to persist data - using a hostPath mounting point by default. Default value: /data/postgres-local.\nThe default user PostgreSQL password. Default value: postgres.\nThe default user PostgreSQL username. Default value: postgres.","title":"io.yupiik.alveoli:postgres-local:1.0.0-SNAPSHOT","url":"//yupiik.github.io/bundlebee/alveoli/postgres-local-io-yupiik-alveoli-postgres-local-1-0-0-SNAPSHOT.html"},{"lang":"en","lvl2":"Maven Dependency\nSample Usage\nConfiguration","text":"Prometheus local/dev setup. Will be available on http://$(PROMETHEUS_SERVICE_SERVICE_HOST):$(PROMETHEUS_SERVICE_SERVICE_PORT).\nThe image to use. Default value: quay.io/prometheus/prometheus:v1.0.1.","title":"io.yupiik.alveoli:prometheus-simple:1.0.0-SNAPSHOT","url":"//yupiik.github.io/bundlebee/alveoli/prometheus-simple-io-yupiik-alveoli-prometheus-simple-1-0-0-SNAPSHOT.html"},{"lang":"en","lvl2":"Maven Dependency\nSample Usage\nConfiguration","text":"Zipkin in memory setup. Will be available on http://$(ZIPKIN_SERVICE_SERVICE_HOST):$(ZIPKIN_SERVICE_SERVICE_PORT). For example http://$(ZIPKIN_SERVICE_SERVICE_HOST):$(ZIPKIN_SERVICE_SERVICE_PORT)/api/v2/spans to push spans through HTTP.\nThe image to use. Default value: openzipkin/zipkin:2.23.\nThe storage type, by default it uses mem storage (in memory). Default value: mem.","title":"io.yupiik.alveoli:zipkin-simple:1.0.0-SNAPSHOT","url":"//yupiik.github.io/bundlebee/alveoli/zipkin-simple-io-yupiik-alveoli-zipkin-simple-1-0-0-SNAPSHOT.html"}]