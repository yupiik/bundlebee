[{"lang":"en","lvl2":"Idea\nUsage\nCommands Detail\nInstallation","text":"The idea behind the program is to create a thread pool (arbitrary set to the concurrency size but this is a detail) and associate to it a throttler (Semaphore). The concurrency set in the start command will limit the enabled concurrency for exec done by the exec command.\nThis enables to submit hundreds of tasks and throttle them without having to take care of that in the script which is always very fragile.\nusing multiple identifiers - we recommend to use ` identifier - the script pid - as base but you can decline it, ex `_pool1 - you can have multiple concurrency in the same script.\nGallop is articulated around 3 main commands:\nstart: will start a local server (unix socket) which will listen and execute other commands,\nexec: client command (means start must be executed before) which sends an command to execute in the throttler,\nawait: client command (means start must be executed before) which awaits all the submited tasks are finished.\nAll commands takes an identifier as first parameter. It is convenient to use $$ from a script since it will take the script pid.\nThe unix socket is created in GALLOP_SOCKET_DIRECTORY directory (can be overriden with an environment variable) which defaults to /tmp. Filename will be gallop_<id>.\nStart command takes a timeout which enables to stop the server anyway if something fails, if negative or zero it is considered infinite.\nstart <id> <concurrency> <timeout in seconds> <check exit code>: starts gallop background process for the enclosing script. It will stop when gallop await is called and all tasks are done or when the timeout is reached.\nid: identifier of the gallop process, you can use $$ to get the script pid (recommended)\nconcurrency: how many tasks can be executed concurrently (matches a number of threads internally)\ntimeout in seconds: the timeout gallop can stay alive, negative or zero means infinite (not recommended)\ncheck exit code: true or false, if true it will check the exit code of exec command is 0 ex: $ gallop start $$ 8 60 true & NOTE: it is important to start gallop with & (as a background process) since it will start a socket and keep running tasks.\nawait <id>: synchronization point for all the submitted tasks, will force gallop to not accept any new task until it is started again.\nid: identifier of the gallop process, you can use $$ to get the script pid (recommended) ex: $ gallop await NOTE: it is a blocking operation.\nexec <id> <command>: force the execution of a command in gallop scheduler\nid: gallop scheduler identifier (must match start value)\ncommand: the command ex: $ gallop exec $$ /opt/bin/myexec run \"my task\"\nEither use hava and execute the binary (java -cp gallop.jar <args>) or directly the native binary of ~23M: gallop.","title":"Getting Started","url":"http://localhost:4200/getting-started.html"},{"lang":"en","text":"","title":"Index","url":"http://localhost:4200/index.html"}]