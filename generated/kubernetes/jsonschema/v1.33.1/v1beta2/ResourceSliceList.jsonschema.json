{
  "description":"ResourceSliceList is a collection of ResourceSlices.",
  "properties":{
    "apiVersion":{
      "description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type":"string"
    },
    "items":{
      "description":"Items is the list of resource ResourceSlices.",
      "items":{
        "description":"ResourceSlice represents one or more resources in a pool of similar resources, managed by a common driver. A pool may span more than one ResourceSlice, and exactly how many ResourceSlices comprise a pool is determined by the driver.\n\nAt the moment, the only supported resources are devices with attributes and capacities. Each device in a given pool, regardless of how many ResourceSlices, must have a unique name. The ResourceSlice in which a device gets published may change over time. The unique identifier for a device is the tuple <driver name>, <pool name>, <device name>.\n\nWhenever a driver needs to update a pool, it increments the pool.Spec.Pool.Generation number and updates all ResourceSlices with that new number and new resource definitions. A consumer must only use ResourceSlices with the highest generation number and ignore all others.\n\nWhen allocating all resources in a pool matching certain criteria or when looking for the best solution among several different alternatives, a consumer should check the number of ResourceSlices in a pool (included in each ResourceSlice) to determine whether its view of a pool is complete and if not, should wait until the driver has completed updating the pool.\n\nFor resources that are not local to a node, the node name is not set. Instead, the driver may use a node selector to specify where the devices are available.\n\nThis is an alpha type and requires enabling the DynamicResourceAllocation feature gate.",
        "properties":{
          "apiVersion":{
            "description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type":"string"
          },
          "kind":{
            "description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type":"string"
          },
          "metadata":{
            "description":"Standard object metadata",
            "properties":{
              "annotations":{
                "additionalProperties":{
                  "type":"string"
                },
                "description":"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations",
                "type":"object"
              },
              "creationTimestamp":{
                "description":"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                "format":"date-time",
                "type":"string"
              },
              "deletionGracePeriodSeconds":{
                "description":"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
                "format":"int64",
                "type":"integer"
              },
              "deletionTimestamp":{
                "description":"DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                "format":"date-time",
                "type":"string"
              },
              "finalizers":{
                "description":"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                "items":{
                  "type":"string"
                },
                "type":"array"
              },
              "generateName":{
                "description":"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                "type":"string"
              },
              "generation":{
                "description":"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
                "format":"int64",
                "type":"integer"
              },
              "labels":{
                "additionalProperties":{
                  "type":"string"
                },
                "description":"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels",
                "type":"object"
              },
              "managedFields":{
                "description":"ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
                "items":{
                  "description":"ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
                  "properties":{
                    "apiVersion":{
                      "description":"APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                      "type":"string"
                    },
                    "fieldsType":{
                      "description":"FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                      "type":"string"
                    },
                    "fieldsV1":{
                      "description":"FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.",
                      "type":"object"
                    },
                    "manager":{
                      "description":"Manager is an identifier of the workflow managing these fields.",
                      "type":"string"
                    },
                    "operation":{
                      "description":"Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                      "type":"string"
                    },
                    "subresource":{
                      "description":"Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                      "type":"string"
                    },
                    "time":{
                      "description":"Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.",
                      "format":"date-time",
                      "type":"string"
                    }
                  },
                  "type":"object"
                },
                "type":"array"
              },
              "name":{
                "description":"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                "type":"string"
              },
              "namespace":{
                "description":"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces",
                "type":"string"
              },
              "ownerReferences":{
                "description":"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                "items":{
                  "description":"OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                  "properties":{
                    "apiVersion":{
                      "description":"API version of the referent.",
                      "type":"string"
                    },
                    "blockOwnerDeletion":{
                      "description":"If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                      "type":"boolean"
                    },
                    "controller":{
                      "description":"If true, this reference points to the managing controller.",
                      "type":"boolean"
                    },
                    "kind":{
                      "description":"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type":"string"
                    },
                    "name":{
                      "description":"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                      "type":"string"
                    },
                    "uid":{
                      "description":"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                      "type":"string"
                    }
                  },
                  "required":[
                    "apiVersion",
                    "kind",
                    "name",
                    "uid"
                  ],
                  "type":"object"
                },
                "type":"array",
                "x-kubernetes-list-map-keys":[
                  "uid"
                ]
              },
              "resourceVersion":{
                "description":"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                "type":"string"
              },
              "selfLink":{
                "description":"Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
                "type":"string"
              },
              "uid":{
                "description":"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                "type":"string"
              }
            },
            "type":"object"
          },
          "spec":{
            "description":"Contains the information published by the driver.\n\nChanging the spec automatically increments the metadata.generation number.",
            "properties":{
              "allNodes":{
                "description":"AllNodes indicates that all nodes have access to the resources in the pool.\n\nExactly one of NodeName, NodeSelector, AllNodes, and PerDeviceNodeSelection must be set.",
                "type":"boolean"
              },
              "devices":{
                "description":"Devices lists some or all of the devices in this pool.\n\nMust not have more than 128 entries.",
                "items":{
                  "description":"Device represents one individual hardware instance that can be selected based on its attributes. Besides the name, exactly one field must be set.",
                  "properties":{
                    "allNodes":{
                      "description":"AllNodes indicates that all nodes have access to the device.\n\nMust only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.",
                      "type":"boolean"
                    },
                    "attributes":{
                      "additionalProperties":{
                        "description":"DeviceAttribute must have exactly one field set.",
                        "properties":{
                          "bool":{
                            "description":"BoolValue is a true/false value.",
                            "type":"boolean"
                          },
                          "int":{
                            "description":"IntValue is a number.",
                            "format":"int64",
                            "type":"integer"
                          },
                          "string":{
                            "description":"StringValue is a string. Must not be longer than 64 characters.",
                            "type":"string"
                          },
                          "version":{
                            "description":"VersionValue is a semantic version according to semver.org spec 2.0.0. Must not be longer than 64 characters.",
                            "type":"string"
                          }
                        },
                        "type":"object"
                      },
                      "description":"Attributes defines the set of attributes for this device. The name of each attribute must be unique in that set.\n\nThe maximum number of attributes and capacities combined is 32.",
                      "type":"object"
                    },
                    "capacity":{
                      "additionalProperties":{
                        "description":"DeviceCapacity describes a quantity associated with a device.",
                        "properties":{
                          "value":{
                            "description":"Value defines how much of a certain device capacity is available.",
                            "type":"string"
                          }
                        },
                        "required":[
                          "value"
                        ],
                        "type":"object"
                      },
                      "description":"Capacity defines the set of capacities for this device. The name of each capacity must be unique in that set.\n\nThe maximum number of attributes and capacities combined is 32.",
                      "type":"object"
                    },
                    "consumesCounters":{
                      "description":"ConsumesCounters defines a list of references to sharedCounters and the set of counters that the device will consume from those counter sets.\n\nThere can only be a single entry per counterSet.\n\nThe total number of device counter consumption entries must be <= 32. In addition, the total number in the entire ResourceSlice must be <= 1024 (for example, 64 devices with 16 counters each).",
                      "items":{
                        "description":"DeviceCounterConsumption defines a set of counters that a device will consume from a CounterSet.",
                        "properties":{
                          "counterSet":{
                            "description":"CounterSet is the name of the set from which the counters defined will be consumed.",
                            "type":"string"
                          },
                          "counters":{
                            "additionalProperties":{
                              "description":"Counter describes a quantity associated with a device.",
                              "properties":{
                                "value":{
                                  "description":"Value defines how much of a certain device counter is available.",
                                  "type":"string"
                                }
                              },
                              "required":[
                                "value"
                              ],
                              "type":"object"
                            },
                            "description":"Counters defines the counters that will be consumed by the device.\n\nThe maximum number counters in a device is 32. In addition, the maximum number of all counters in all devices is 1024 (for example, 64 devices with 16 counters each).",
                            "type":"object"
                          }
                        },
                        "required":[
                          "counterSet",
                          "counters"
                        ],
                        "type":"object"
                      },
                      "type":"array"
                    },
                    "name":{
                      "description":"Name is unique identifier among all devices managed by the driver in the pool. It must be a DNS label.",
                      "type":"string"
                    },
                    "nodeName":{
                      "description":"NodeName identifies the node where the device is available.\n\nMust only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.",
                      "type":"string"
                    },
                    "nodeSelector":{
                      "description":"NodeSelector defines the nodes where the device is available.\n\nMust use exactly one term.\n\nMust only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.",
                      "properties":{
                        "nodeSelectorTerms":{
                          "description":"Required. A list of node selector terms. The terms are ORed.",
                          "items":{
                            "description":"A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                            "properties":{
                              "matchExpressions":{
                                "description":"A list of node selector requirements by node's labels.",
                                "items":{
                                  "description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "properties":{
                                    "key":{
                                      "description":"The label key that the selector applies to.",
                                      "type":"string"
                                    },
                                    "operator":{
                                      "description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                      "type":"string"
                                    },
                                    "values":{
                                      "description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                      "items":{
                                        "type":"string"
                                      },
                                      "type":"array"
                                    }
                                  },
                                  "required":[
                                    "key",
                                    "operator"
                                  ],
                                  "type":"object"
                                },
                                "type":"array"
                              },
                              "matchFields":{
                                "description":"A list of node selector requirements by node's fields.",
                                "items":{
                                  "description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "properties":{
                                    "key":{
                                      "description":"The label key that the selector applies to.",
                                      "type":"string"
                                    },
                                    "operator":{
                                      "description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                      "type":"string"
                                    },
                                    "values":{
                                      "description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                      "items":{
                                        "type":"string"
                                      },
                                      "type":"array"
                                    }
                                  },
                                  "required":[
                                    "key",
                                    "operator"
                                  ],
                                  "type":"object"
                                },
                                "type":"array"
                              }
                            },
                            "type":"object"
                          },
                          "type":"array"
                        }
                      },
                      "required":[
                        "nodeSelectorTerms"
                      ],
                      "type":"object"
                    },
                    "taints":{
                      "description":"If specified, these are the driver-defined taints.\n\nThe maximum number of taints is 4.\n\nThis is an alpha field and requires enabling the DRADeviceTaints feature gate.",
                      "items":{
                        "description":"The device this taint is attached to has the \"effect\" on any claim which does not tolerate the taint and, through the claim, to pods using the claim.",
                        "properties":{
                          "effect":{
                            "description":"The effect of the taint on claims that do not tolerate the taint and through such claims on the pods using them. Valid effects are NoSchedule and NoExecute. PreferNoSchedule as used for nodes is not valid here.",
                            "type":"string"
                          },
                          "key":{
                            "description":"The taint key to be applied to a device. Must be a label name.",
                            "type":"string"
                          },
                          "timeAdded":{
                            "description":"TimeAdded represents the time at which the taint was added. Added automatically during create or update if not set.",
                            "format":"date-time",
                            "type":"string"
                          },
                          "value":{
                            "description":"The taint value corresponding to the taint key. Must be a label value.",
                            "type":"string"
                          }
                        },
                        "required":[
                          "key",
                          "effect"
                        ],
                        "type":"object"
                      },
                      "type":"array"
                    }
                  },
                  "required":[
                    "name"
                  ],
                  "type":"object"
                },
                "type":"array"
              },
              "driver":{
                "description":"Driver identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver. This field is immutable.",
                "type":"string"
              },
              "nodeName":{
                "description":"NodeName identifies the node which provides the resources in this pool. A field selector can be used to list only ResourceSlice objects belonging to a certain node.\n\nThis field can be used to limit access from nodes to ResourceSlices with the same node name. It also indicates to autoscalers that adding new nodes of the same type as some old node might also make new resources available.\n\nExactly one of NodeName, NodeSelector, AllNodes, and PerDeviceNodeSelection must be set. This field is immutable.",
                "type":"string"
              },
              "nodeSelector":{
                "description":"NodeSelector defines which nodes have access to the resources in the pool, when that pool is not limited to a single node.\n\nMust use exactly one term.\n\nExactly one of NodeName, NodeSelector, AllNodes, and PerDeviceNodeSelection must be set.",
                "properties":{
                  "nodeSelectorTerms":{
                    "description":"Required. A list of node selector terms. The terms are ORed.",
                    "items":{
                      "description":"A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                      "properties":{
                        "matchExpressions":{
                          "description":"A list of node selector requirements by node's labels.",
                          "items":{
                            "description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                            "properties":{
                              "key":{
                                "description":"The label key that the selector applies to.",
                                "type":"string"
                              },
                              "operator":{
                                "description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                "type":"string"
                              },
                              "values":{
                                "description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                "items":{
                                  "type":"string"
                                },
                                "type":"array"
                              }
                            },
                            "required":[
                              "key",
                              "operator"
                            ],
                            "type":"object"
                          },
                          "type":"array"
                        },
                        "matchFields":{
                          "description":"A list of node selector requirements by node's fields.",
                          "items":{
                            "description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                            "properties":{
                              "key":{
                                "description":"The label key that the selector applies to.",
                                "type":"string"
                              },
                              "operator":{
                                "description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                "type":"string"
                              },
                              "values":{
                                "description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                "items":{
                                  "type":"string"
                                },
                                "type":"array"
                              }
                            },
                            "required":[
                              "key",
                              "operator"
                            ],
                            "type":"object"
                          },
                          "type":"array"
                        }
                      },
                      "type":"object"
                    },
                    "type":"array"
                  }
                },
                "required":[
                  "nodeSelectorTerms"
                ],
                "type":"object"
              },
              "perDeviceNodeSelection":{
                "description":"PerDeviceNodeSelection defines whether the access from nodes to resources in the pool is set on the ResourceSlice level or on each device. If it is set to true, every device defined the ResourceSlice must specify this individually.\n\nExactly one of NodeName, NodeSelector, AllNodes, and PerDeviceNodeSelection must be set.",
                "type":"boolean"
              },
              "pool":{
                "description":"Pool describes the pool that this ResourceSlice belongs to.",
                "properties":{
                  "generation":{
                    "description":"Generation tracks the change in a pool over time. Whenever a driver changes something about one or more of the resources in a pool, it must change the generation in all ResourceSlices which are part of that pool. Consumers of ResourceSlices should only consider resources from the pool with the highest generation number. The generation may be reset by drivers, which should be fine for consumers, assuming that all ResourceSlices in a pool are updated to match or deleted.\n\nCombined with ResourceSliceCount, this mechanism enables consumers to detect pools which are comprised of multiple ResourceSlices and are in an incomplete state.",
                    "format":"int64",
                    "type":"integer"
                  },
                  "name":{
                    "description":"Name is used to identify the pool. For node-local devices, this is often the node name, but this is not required.\n\nIt must not be longer than 253 characters and must consist of one or more DNS sub-domains separated by slashes. This field is immutable.",
                    "type":"string"
                  },
                  "resourceSliceCount":{
                    "description":"ResourceSliceCount is the total number of ResourceSlices in the pool at this generation number. Must be greater than zero.\n\nConsumers can use this to check whether they have seen all ResourceSlices belonging to the same pool.",
                    "format":"int64",
                    "type":"integer"
                  }
                },
                "required":[
                  "name",
                  "generation",
                  "resourceSliceCount"
                ],
                "type":"object"
              },
              "sharedCounters":{
                "description":"SharedCounters defines a list of counter sets, each of which has a name and a list of counters available.\n\nThe names of the SharedCounters must be unique in the ResourceSlice.\n\nThe maximum number of counters in all sets is 32.",
                "items":{
                  "description":"CounterSet defines a named set of counters that are available to be used by devices defined in the ResourceSlice.\n\nThe counters are not allocatable by themselves, but can be referenced by devices. When a device is allocated, the portion of counters it uses will no longer be available for use by other devices.",
                  "properties":{
                    "counters":{
                      "additionalProperties":{
                        "description":"Counter describes a quantity associated with a device.",
                        "properties":{
                          "value":{
                            "description":"Value defines how much of a certain device counter is available.",
                            "type":"string"
                          }
                        },
                        "required":[
                          "value"
                        ],
                        "type":"object"
                      },
                      "description":"Counters defines the set of counters for this CounterSet The name of each counter must be unique in that set and must be a DNS label.\n\nThe maximum number of counters in all sets is 32.",
                      "type":"object"
                    },
                    "name":{
                      "description":"Name defines the name of the counter set. It must be a DNS label.",
                      "type":"string"
                    }
                  },
                  "required":[
                    "name",
                    "counters"
                  ],
                  "type":"object"
                },
                "type":"array"
              }
            },
            "required":[
              "driver",
              "pool"
            ],
            "type":"object"
          }
        },
        "required":[
          "spec"
        ],
        "type":"object",
        "x-kubernetes-group-version-kind":[
          {
            "group":"resource.k8s.io",
            "kind":"ResourceSlice",
            "version":"v1beta2"
          }
        ]
      },
      "type":"array"
    },
    "kind":{
      "description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type":"string"
    },
    "metadata":{
      "description":"Standard list metadata",
      "properties":{
        "continue":{
          "description":"continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type":"string"
        },
        "remainingItemCount":{
          "description":"remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
          "format":"int64",
          "type":"integer"
        },
        "resourceVersion":{
          "description":"String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type":"string"
        },
        "selfLink":{
          "description":"Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type":"string"
        }
      },
      "type":"object"
    }
  },
  "required":[
    "items"
  ],
  "type":"object",
  "x-kubernetes-group-version-kind":[
    {
      "group":"resource.k8s.io",
      "kind":"ResourceSliceList",
      "version":"v1beta2"
    }
  ]
}